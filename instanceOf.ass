; start main program
	BRA debutProg
erreurDiv0:
	WSTR "Arret de l'execution: division par z√©ro impossible."
	HALT
debutProg:
; Main program
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
	LEA 1(GB), R0
	STORE R0, 3(GB)
	LOAD code.Object.equals, R0
	STORE R0, 4(GB)
	LOAD code.A.setA, R0
	STORE R0, 5(GB)
	LOAD code.A.getA, R0
	STORE R0, 6(GB)
	LEA 1(GB), R0
	STORE R0, 7(GB)
	LOAD code.Object.equals, R0
	STORE R0, 8(GB)
	LEA 3(GB), R0
	STORE R0, 9(GB)
	LOAD code.Object.equals, R0
	STORE R0, 10(GB)
	LOAD code.A.setA, R0
	STORE R0, 11(GB)
	LOAD code.A.getA, R0
	STORE R0, 12(GB)
	LOAD code.A1.setApre, R0
	STORE R0, 13(GB)
	LOAD code.A1.getApre, R0
	STORE R0, 14(GB)
	LEA 3(GB), R0
	STORE R0, 15(GB)
	LOAD code.Object.equals, R0
	STORE R0, 16(GB)
	LOAD code.A.setA, R0
	STORE R0, 17(GB)
	LOAD code.A.getA, R0
	STORE R0, 18(GB)
	LOAD code.A2.setAsec, R0
	STORE R0, 19(GB)
	LOAD code.A2.getAsec, R0
	STORE R0, 20(GB)
	LEA 3(GB), R0
	STORE R0, 21(GB)
	LOAD code.Object.equals, R0
	STORE R0, 22(GB)
	LOAD code.A.setA, R0
	STORE R0, 23(GB)
	LOAD code.A.getA, R0
	STORE R0, 24(GB)
	LOAD code.A3.setAthr, R0
	STORE R0, 25(GB)
	LOAD code.A3.getA, R0
	STORE R0, 24(GB)
	ADDSP #26
	BRA debutMain
init.A:
	LOAD #5, R2
	LOAD -2(LB), R1
	STORE R2, 1(R1)
	RTS
init.B:
	LOAD #7, R2
	LOAD -2(LB), R1
	STORE R2, 1(R1)
	RTS
init.A1:
	LOAD -2(LB), R0
	PUSH R0
	BSR init.A
	SUBSP #1
	LOAD #1, R2
	LOAD -2(LB), R1
	STORE R2, 2(R1)
	RTS
init.A2:
	LOAD -2(LB), R0
	PUSH R0
	BSR init.A
	SUBSP #1
	LOAD #2, R2
	LOAD -2(LB), R1
	STORE R2, 2(R1)
	RTS
init.A3:
	LOAD -2(LB), R0
	PUSH R0
	BSR init.A
	SUBSP #1
	LOAD #3, R2
	LOAD -2(LB), R1
	STORE R2, 2(R1)
	RTS
code.A.setA:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	LOAD -3(LB), R2
	LOAD -2(LB), R3
	LOAD R3, R0
	LEA 1(R0), R3
	STORE R2, 0(R3)
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	BRA fincode.A.setA
	WSTR "Erreur : sortie de la methodecode.A.setAsans return"
	WNL
	ERROR
fincode.A.setA:
	RTS
code.A.getA:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	LOAD -2(LB), R2
	LOAD R2, R0
	LEA 1(R0), R2
	LOAD R2, R0
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	BRA fincode.A.getA
	WSTR "Erreur : sortie de la methodecode.A.getAsans return"
	WNL
	ERROR
fincode.A.getA:
	RTS
code.A1.setApre:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	LOAD -3(LB), R3
	LOAD -2(LB), R4
	LOAD R4, R0
	LEA 2(R0), R4
	STORE R3, 0(R4)
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	BRA fincode.A1.setApre
	WSTR "Erreur : sortie de la methodecode.A1.setApresans return"
	WNL
	ERROR
fincode.A1.setApre:
	RTS
code.A1.getApre:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	LOAD -2(LB), R3
	LOAD R3, R0
	LEA 2(R0), R3
	LOAD R3, R0
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	BRA fincode.A1.getApre
	WSTR "Erreur : sortie de la methodecode.A1.getApresans return"
	WNL
	ERROR
fincode.A1.getApre:
	RTS
code.A2.setAsec:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	LOAD -3(LB), R4
	LOAD -2(LB), R5
	LOAD R5, R0
	LEA 2(R0), R5
	STORE R4, 0(R5)
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	BRA fincode.A2.setAsec
	WSTR "Erreur : sortie de la methodecode.A2.setAsecsans return"
	WNL
	ERROR
fincode.A2.setAsec:
	RTS
code.A2.getAsec:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	LOAD -2(LB), R4
	LOAD R4, R0
	LEA 2(R0), R4
	LOAD R4, R0
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	BRA fincode.A2.getAsec
	WSTR "Erreur : sortie de la methodecode.A2.getAsecsans return"
	WNL
	ERROR
fincode.A2.getAsec:
	RTS
code.A3.setAthr:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	LOAD -3(LB), R5
	LOAD -2(LB), R6
	LOAD R6, R0
	LEA 2(R0), R6
	STORE R5, 0(R6)
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	BRA fincode.A3.setAthr
	WSTR "Erreur : sortie de la methodecode.A3.setAthrsans return"
	WNL
	ERROR
fincode.A3.setAthr:
	RTS
code.A3.getA:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	LOAD -2(LB), R5
	LOAD R5, R0
	LEA 2(R0), R5
	LOAD R5, R0
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	BRA fincode.A3.getA
	WSTR "Erreur : sortie de la methodecode.A3.getAsans return"
	WNL
	ERROR
fincode.A3.getA:
	RTS
debutMain:
; Beginning of main instructions:
	NEW #2, R1
	LEA 3(GB), R0
	STORE R0, 0(R1)
	PUSH R1
	BSR init.A
	LOAD 0(SP), R1
	STORE R1, 26(GB)
	NEW #3, R1
	LEA 9(GB), R0
	STORE R0, 0(R1)
	PUSH R1
	BSR init.A1
	LOAD 0(SP), R1
	STORE R1, 27(GB)
	NEW #3, R1
	LEA 15(GB), R0
	STORE R0, 0(R1)
	PUSH R1
	BSR init.A2
	LOAD 0(SP), R1
	STORE R1, 28(GB)
	NEW #3, R1
	LEA 21(GB), R0
	STORE R0, 0(R1)
	PUSH R1
	BSR init.A3
	LOAD 0(SP), R1
	STORE R1, 29(GB)
	NEW #2, R1
	LEA 7(GB), R0
	STORE R0, 0(R1)
	PUSH R1
	BSR init.B
	LOAD 0(SP), R1
	STORE R1, 30(GB)
	ADDSP #1
	LOAD 26(GB), R6
	LOAD R6, R0
	STORE R0, 0(SP)
	LOAD 0(SP), R1
	LOAD 0(R1), R1
	BSR 3(R1)
	SUBSP #1
	LOAD R0, R7
	STORE R7, 31(GB)
	WSTR "true =="
	LOAD R0, R1
	LOAD 27(GB), R7
	ADDSP #2
	STORE R7, 0(SP)
	LEA 9(GB), R7
	STORE R7, -1(SP)
	BSR code.instanceOf
	SUBSP #2
	LOAD R0, R1
	LOAD #0, R1
	CMP R0, R1
	BEQ printFalse0
	WSTR "true"
	BRA endPrint0
printFalse0:
	WSTR "false"
endPrint0:
	WNL
	WSTR "true =="
	LOAD R0, R1
	LOAD 27(GB), R7
	ADDSP #2
	STORE R7, 0(SP)
	LEA 1(GB), R7
	STORE R7, -1(SP)
	BSR code.instanceOf
	SUBSP #2
	LOAD R0, R1
	LOAD #0, R1
	CMP R0, R1
	BEQ printFalse1
	WSTR "true"
	BRA endPrint1
printFalse1:
	WSTR "false"
endPrint1:
	WNL
	WSTR "true =="
	LOAD R0, R1
	LOAD 28(GB), R7
	ADDSP #2
	STORE R7, 0(SP)
	LEA 15(GB), R7
	STORE R7, -1(SP)
	BSR code.instanceOf
	SUBSP #2
	LOAD R0, R1
	LOAD #0, R1
	CMP R0, R1
	BEQ printFalse2
	WSTR "true"
	BRA endPrint2
printFalse2:
	WSTR "false"
endPrint2:
	WNL
	WSTR "true =="
	LOAD R0, R1
	LOAD 27(GB), R7
	ADDSP #2
	STORE R7, 0(SP)
	LEA 3(GB), R7
	STORE R7, -1(SP)
	BSR code.instanceOf
	SUBSP #2
	LOAD R0, R1
	LOAD #0, R1
	CMP R0, R1
	BEQ printFalse3
	WSTR "true"
	BRA endPrint3
printFalse3:
	WSTR "false"
endPrint3:
	WNL
	WSTR "true =="
	LOAD R0, R1
	LOAD 29(GB), R7
	ADDSP #2
	STORE R7, 0(SP)
	LEA 3(GB), R7
	STORE R7, -1(SP)
	BSR code.instanceOf
	SUBSP #2
	LOAD R0, R1
	LOAD #0, R1
	CMP R0, R1
	BEQ printFalse4
	WSTR "true"
	BRA endPrint4
printFalse4:
	WSTR "false"
endPrint4:
	WNL
	WSTR "false == "
	LOAD R0, R1
	LOAD 30(GB), R7
	ADDSP #2
	STORE R7, 0(SP)
	LEA 3(GB), R7
	STORE R7, -1(SP)
	BSR code.instanceOf
	SUBSP #2
	LOAD R0, R1
	LOAD #0, R1
	CMP R0, R1
	BEQ printFalse5
	WSTR "true"
	BRA endPrint5
printFalse5:
	WSTR "false"
endPrint5:
	WNL
	LOAD 31(GB), R7
	LOAD #5, R8
	CMP R8, R7
	BNE debutSinon10
	WSTR "C'est juste"
	LOAD R0, R1
	WNL
	BRA finSinon0
debutSinon10:
	WSTR "C'est faux"
	LOAD R0, R1
	WNL
finSinon0:
	ADDSP #1
	LOAD 27(GB), R7
	LOAD R7, R0
	STORE R0, 0(SP)
	LOAD 0(SP), R1
	LOAD 0(R1), R1
	BSR 5(R1)
	SUBSP #1
	LOAD R0, R8
	STORE R8, 31(GB)
	LOAD 31(GB), R8
	LOAD #1, R9
	CMP R9, R8
	BNE debutSinon11
	WSTR "C'est juste"
	LOAD R0, R1
	WNL
	BRA finSinon1
debutSinon11:
	WSTR "C'est faux"
	LOAD R0, R1
	WNL
finSinon1:
	ADDSP #1
	LOAD 27(GB), R8
	LOAD R8, R0
	STORE R0, 0(SP)
	LOAD 0(SP), R1
	LOAD 0(R1), R1
	BSR 3(R1)
	SUBSP #1
	LOAD R0, R9
	STORE R9, 31(GB)
	LOAD 31(GB), R9
	LOAD #5, R10
	CMP R10, R9
	BNE debutSinon12
	WSTR "C'est juste"
	LOAD R0, R1
	WNL
	BRA finSinon2
debutSinon12:
	WSTR "C'est faux"
	LOAD R0, R1
	WNL
finSinon2:
	ADDSP #1
	LOAD 29(GB), R9
	LOAD R9, R0
	STORE R0, 0(SP)
	LOAD 0(SP), R1
	LOAD 0(R1), R1
	BSR 3(R1)
	SUBSP #1
	LOAD R0, R10
	STORE R10, 31(GB)
	LOAD 31(GB), R10
	LOAD #2, R11
	CMP R11, R10
	BNE debutSinon13
	WSTR "C'est juste"
	LOAD R0, R1
	WNL
	BRA finSinon3
debutSinon13:
	WSTR "C'est faux"
	LOAD R0, R1
	WNL
finSinon3:
	ADDSP #1
	LOAD 29(GB), R10
	LOAD R10, R0
	STORE R0, 0(SP)
	LOAD 0(SP), R1
	LOAD 0(R1), R1
	BSR 3(R1)
	SUBSP #1
	LOAD R0, R11
	STORE R11, 31(GB)
	LOAD 31(GB), R11
	LOAD #5, R12
	CMP R12, R11
	BNE debutSinon14
	WSTR "C'est juste"
	LOAD R0, R1
	WNL
	BRA finSinon4
debutSinon14:
	WSTR "C'est faux"
	LOAD R0, R1
	WNL
finSinon4:
	HALT
code.Object.equals:
	LOAD -2(LB), R0
	LOAD -3(LB), R1
	CMP R0, R1
	SEQ R0
	RTS
code.instanceOf:
	LOAD -2(LB), R0
	LOAD 0(R0), R0
	LOAD -3(LB), R1
	CMP R0, R1
	SEQ R0
	RTS
deferencement_null:
	WSTR "Erreur : deferencement_null"
	WNL
	ERROR
pile_pleine:
	WSTR "Erreur : pile_pleine"
	WNL
	ERROR
tas_pleine:
	WSTR "Erreur : tas_pleine"
	WNL
	ERROR
; end main program
