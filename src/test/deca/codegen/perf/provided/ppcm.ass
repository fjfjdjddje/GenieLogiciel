; start main program
	BRA debutProg
erreurDiv0:
	WSTR "Arret de l'execution: division par z√©ro impossible."
	HALT
debutProg:
; Main program
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
	ADDSP #3
	BRA debutMain
debutMain:
; Beginning of main instructions:
	RINT
	LOAD R1, R2
	STORE R2, 3(GB)
	RINT
	LOAD R1, R2
	STORE R2, 4(GB)
	LOAD 3(GB), R2
	STORE R2, 5(GB)
	LOAD 4(GB), R2
	STORE R2, 6(GB)
debutWhile1:
	LOAD 5(GB), R2
	LOAD 6(GB), R3
	CMP R3, R2
	BEQ finWhile1
debutWhile2:
	LOAD 5(GB), R2
	LOAD 6(GB), R3
	CMP R3, R2
	BLE finWhile2
	LOAD 6(GB), R2
	LOAD 4(GB), R3
	ADD R3, R2
	STORE R2, 6(GB)
	BRA debutWhile2
finWhile2:
debutWhile3:
	LOAD 5(GB), R2
	LOAD 6(GB), R3
	CMP R3, R2
	BGE finWhile3
	LOAD 5(GB), R2
	LOAD 3(GB), R3
	ADD R3, R2
	STORE R2, 5(GB)
	BRA debutWhile3
finWhile3:
	BRA debutWhile1
finWhile1:
	WSTR "le ppcm de "
	LOAD R0, R1
	LOAD 3(GB), R2
	LOAD R2, R1
	WINT
	WSTR "et "
	LOAD R0, R1
	LOAD 4(GB), R2
	LOAD R2, R1
	WINT
	WSTR "est : "
	LOAD R0, R1
	LOAD 5(GB), R2
	LOAD R2, R1
	WINT
	WNL
	HALT
code.Object.equals:
	LOAD -2(LB), R0
	LOAD -3(LB), R1
	CMP R0, R1
	SEQ R0
	RTS
code.instanceOf:
	LOAD -2(LB), R0
	LOAD 0(R0), R0
	LOAD -3(LB), R1
	CMP R0, R1
	SEQ R0
	RTS
deferencement_null:
	WSTR "Erreur : deferencement_null"
	WNL
	ERROR
pile_pleine:
	WSTR "Erreur : pile_pleine"
	WNL
	ERROR
tas_pleine:
	WSTR "Erreur : tas_pleine"
	WNL
	ERROR
; end main program
