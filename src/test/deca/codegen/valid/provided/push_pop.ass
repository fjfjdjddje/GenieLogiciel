; start main program
	BRA debutProg
erreurDiv0:
	WSTR "Arret de l'execution: division par z√©ro impossible."
	ERROR
debutProg:
; Main program
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
	ADDSP #3
	BRA debutMain
debutMain:
; Beginning of main instructions:
	RFLOAT
	LOAD R1, R2
	STORE R2, 3(GB)
	ADDSP #1
	LOAD #0, R2
	STORE R2, 4(GB)
	ADDSP #1
debutWhile1:
	LOAD 4(GB), R2
	LOAD #15, R3
	CMP R3, R2
	BGE finWhile1
	LOAD 4(GB), R2
	LOAD #1, R3
	ADD R3, R2
	STORE R2, 4(GB)
	LOAD 4(GB), R2
	LOAD #5, R3
	CMP R3, R2
	BGE debutSinon10
	WSTR "je suis dans if"
	LOAD R0, R1
	WNL
	LOAD 4(GB), R2
	LOAD R2, R1
	WINT
	WNL
	BRA finSinon0
debutSinon10:
	LOAD 4(GB), R2
	LOAD #5, R3
	CMP R3, R2
	BNE debutSinon20
	WSTR "je suis dans elseif1"
	LOAD R0, R1
	WNL
	LOAD 4(GB), R2
	LOAD R2, R1
	WINT
	WNL
	BRA finSinon0
debutSinon20:
	LOAD 4(GB), R2
	LOAD #6, R3
	CMP R3, R2
	BNE debutSinon30
	WSTR "je suis dans elseif2"
	LOAD R0, R1
	WNL
	LOAD 4(GB), R2
	LOAD R2, R1
	WINT
	WNL
	BRA finSinon0
debutSinon30:
	WSTR "je suis dans else"
	LOAD R0, R1
	WNL
	LOAD 4(GB), R2
	LOAD R2, R1
	WINT
	WNL
finSinon0:
	BRA debutWhile1
finWhile1:
	LOAD 3(GB), R2
	LOAD R2, R1
	WFLOAT
	WNL
	LOAD #1, R2
	LOAD #2, R3
	ADD R3, R2
	LOAD #3, R3
	ADD R3, R2
	LOAD #4, R3
	ADD R3, R2
	LOAD #5, R3
	ADD R3, R2
	LOAD #6, R3
	ADD R3, R2
	LOAD #7, R3
	ADD R3, R2
	LOAD #8, R3
	ADD R3, R2
	LOAD #9, R3
	ADD R3, R2
	LOAD #10, R3
	ADD R3, R2
	LOAD #11, R3
	ADD R3, R2
	LOAD #12, R3
	ADD R3, R2
	LOAD #13, R3
	ADD R3, R2
	LOAD #14, R3
	ADD R3, R2
	LOAD #15, R3
	ADD R3, R2
	LOAD #16, R3
	ADD R3, R2
	LOAD #17, R3
	ADD R3, R2
	LOAD #18, R3
	ADD R3, R2
	LOAD #10, R3
	MUL R3, R2
	LOAD R2, R1
	WINT
	WNL
	LOAD #1, R2
	LOAD #1, R3
	LOAD #1, R4
	LOAD #1, R5
	MUL R5, R4
	LOAD #1, R5
	LOAD #0, R6
	MUL R6, R5
	MUL R5, R4
	MUL R4, R3
	MUL R3, R2
	LOAD R2, R1
	LOAD #0, R1
	CMP R2, R1
	BEQ printFalse0
	WSTR "true"
	BRA endPrint0
printFalse0:
	WSTR "false"
endPrint0:
	WNL
	LOAD #1, R2
	LOAD #2, R3
	ADD R3, R2
	LOAD #3, R3
	ADD R3, R2
	LOAD #4, R3
	ADD R3, R2
	LOAD #5, R3
	ADD R3, R2
	LOAD #6, R3
	ADD R3, R2
	LOAD #7, R3
	ADD R3, R2
	LOAD #8, R3
	ADD R3, R2
	LOAD #9, R3
	ADD R3, R2
	LOAD #10, R3
	ADD R3, R2
	LOAD #11, R3
	ADD R3, R2
	LOAD #12, R3
	ADD R3, R2
	LOAD #13, R3
	ADD R3, R2
	LOAD #14, R3
	ADD R3, R2
	LOAD #15, R3
	ADD R3, R2
	LOAD #16, R3
	ADD R3, R2
	LOAD #17, R3
	ADD R3, R2
	LOAD #18, R3
	ADD R3, R2
	LOAD #10, R3
	LOAD #10, R4
	SUB R4, R3
	LOAD #10, R4
	LOAD #10, R5
	SUB R5, R4
	ADD R4, R3
	MUL R3, R2
	LOAD R2, R1
	WINT
	WNL
	HALT
code.Object.equals:
	LOAD -2(LB), R0
	LOAD -3(LB), R1
	CMP R0, R1
	SEQ R0
	RTS
code.instanceOf:
	LOAD -2(LB), R0
	LOAD 0(R0), R0
	LOAD -3(LB), R1
	CMP R0, R1
	SEQ R0
	RTS
deferencement_null:
	WSTR "Erreur : deferencement_null"
	WNL
	ERROR
pile_pleine:
	WSTR "Erreur : pile_pleine"
	WNL
	ERROR
tas_pleine:
	WSTR "Erreur : tas_pleine"
	WNL
	ERROR
; end main program
